var documenterSearchIndex = {"docs":
[{"location":"#SBML.jl-—-load-systems-biology-models-from-SBML-files","page":"Documentation","title":"SBML.jl — load systems biology models from SBML files","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"This package provides a straightforward way to load model- and simulation-relevant information from SBML files.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"The library provides a single function readSBML to load a Model:","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"julia> using SBML\njulia> mdl = readSBML(\"Ec_core_flux1.xml\")\nModel(…)\n\njulia> mdl.compartments\n2-element Array{String,1}:\n \"Extra_organism\"\n \"Cytosol\"","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"There are several functions to help you with using the data in the usual COBRA-style workflows, such as getS:","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"julia> metabolites, reactions, S = getS(mdl)\njulia> metabolites\n77-element Array{String,1}:\n \"M_succoa_c\"\n \"M_ac_c\"\n \"M_etoh_c\"\n  ⋮\n\njulia> S\n77×77 SparseArrays.SparseMatrixCSC{Float64,Int64} with 308 stored entries:\n  [60,  1]  =  -1.0\n  [68,  1]  =  1.0\n  [1 ,  2]  =  1.0\n  [6 ,  2]  =  -1.0\n  ⋮\n  [23, 76]  =  1.0\n  [56, 76]  =  -1.0\n  [30, 77]  =  -1.0\n  [48, 77]  =  1.0\n\njulia> Matrix(S)\n77×77 Array{Float64,2}:\n 0.0   1.0  0.0  0.0  0.0  0.0  0.0  …  0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0     0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0     0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0   0.0  1.0  0.0  0.0  0.0  0.0     0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0     0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0  -1.0  0.0  0.0  0.0  0.0  0.0  …  0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0     0.0   0.0  1.0  -1.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0     0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0     0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0     0.0  -1.0  0.0   0.0  0.0  0.0  0.0\n ⋮                         ⋮         ⋱  ⋮                          ⋮    ","category":"page"},{"location":"#Functions","page":"Documentation","title":"Functions","text":"","category":"section"},{"location":"#Data-structures","page":"Documentation","title":"Data structures","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Modules = [SBML]\nPages = [\"structs.jl\"]","category":"page"},{"location":"#SBML.Maybe","page":"Documentation","title":"SBML.Maybe","text":"Maybe{X}\n\nType shortcut for \"X or nothing\" or \"nullable X\" in javaspeak. Name got inspired by our functional friends.\n\n\n\n\n\n","category":"type"},{"location":"#SBML.GeneProduct","page":"Documentation","title":"SBML.GeneProduct","text":"Gene product metadata.\n\n\n\n\n\n","category":"type"},{"location":"#SBML.Model","page":"Documentation","title":"SBML.Model","text":"Structure that collects the model-related data. Contains parameters, units, compartments, species and reactions and gene_products, and additional notes and annotation (also present internally in some of the data fields). The contained dictionaries are indexed by identifiers of the corresponding objects.\n\n\n\n\n\n","category":"type"},{"location":"#SBML.Reaction","page":"Documentation","title":"SBML.Reaction","text":"Reaction with stoichiometry that assigns reactants and products their relative consumption/production rates (accessible in field stoichiometry), lower/upper bounds (in tuples lb and ub, with unit names), and objective coefficient (oc). Also may contains notes and annotation.\n\n\n\n\n\n","category":"type"},{"location":"#SBML.Species","page":"Documentation","title":"SBML.Species","text":"Species metadata – contains a human-readable name, a compartment identifier, formula, charge, and additional notes and annotation.\n\n\n\n\n\n","category":"type"},{"location":"#SBML.UnitPart","page":"Documentation","title":"SBML.UnitPart","text":"Part of a measurement unit definition that corresponds to the SBML definition of Unit. For example, the unit \"per square megahour\", Mh^(-2), is written as:\n\nUnitPart(\"second\",  # base SI unit, this says we are measuring time\n         -2,        # exponent, says \"per square\"\n         6,         # log-10 scale of the unit, says \"mega\"\n         1/3600)    # second-to-hour multiplier\n\nCompound units (such as \"volt-amperes\" and \"dozens of yards per ounce\") are built from multiple UnitParts; see the definition of field units in Model.\n\n\n\n\n\n","category":"type"},{"location":"#Base-functions","page":"Documentation","title":"Base functions","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Modules = [SBML]\nPages = [\"version.jl\", \"readsbml.jl\"]","category":"page"},{"location":"#SBML.SBMLVersion-Tuple{}","page":"Documentation","title":"SBML.SBMLVersion","text":"function SBMLVersion()\n\nGet the version of the used SBML library in Julia version format.\n\n\n\n\n\n","category":"method"},{"location":"#SBML.extractModel-Tuple{Ptr{Nothing}}","page":"Documentation","title":"SBML.extractModel","text":"function extractModel(mdl::VPtr)::Model\n\nTake the SBMLModel_t pointer and extract all information required to make a valid Model structure.\n\n\n\n\n\n","category":"method"},{"location":"#SBML.getOptionalString-Tuple{Ptr{Nothing},Any}","page":"Documentation","title":"SBML.getOptionalString","text":"function getOptionalString(x::VPtr, fn_sym)::Maybe{String}\n\nC-call the SBML function fn_sym with a single parameter x, interpret the result as a nullable string pointer and return appropriately.\n\nThis is used to get notes and annotations and several other things (see getNotes, getAnnotations)\n\n\n\n\n\n","category":"method"},{"location":"#SBML.readSBML-Tuple{String}","page":"Documentation","title":"SBML.readSBML","text":"function readSBML(fn::String)::Model\n\nRead the SBML from a XML file in fn and return the contained Model.\n\n\n\n\n\n","category":"method"},{"location":"#Data-helpers","page":"Documentation","title":"Data helpers","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Modules = [SBML]\nPages = [\"utils.jl\"]","category":"page"},{"location":"#SBML.getLBs-Tuple{Model}","page":"Documentation","title":"SBML.getLBs","text":"function getLBs(m::Model)::Vector{Tuple{Float64,String}}\n\nExtract a vector of lower bounds of reaction rates from the model. All bounds are accompanied with the unit of the corresponding value (this behavior is based on SBML specification).\n\n\n\n\n\n","category":"method"},{"location":"#SBML.getOCs-Tuple{Model}","page":"Documentation","title":"SBML.getOCs","text":"function getOCs(m::Model)::Vector{Float64}\n\nExtract the vector of objective coefficients of each reaction.\n\n\n\n\n\n","category":"method"},{"location":"#SBML.getS-Tuple{Model}","page":"Documentation","title":"SBML.getS","text":"function getS(m::Model; zeros=spzeros)::Tuple{Vector{String},Vector{String},AbstractMatrix{Float64}}\n\nExtract the vector of species (aka metabolite) identifiers, vector of reaction identifiers, and the (dense) stoichiometry matrix from an existing Model. Returns a tuple with these values.\n\nThe matrix is sparse by default (initially constructed by SparseArrays.spzeros). You can fill in a custom empty matrix constructed to argument zeros; e.g. running with zeros=zeros will produce a dense matrix.\n\n\n\n\n\n","category":"method"},{"location":"#SBML.getUBs-Tuple{Model}","page":"Documentation","title":"SBML.getUBs","text":"function getUBs(m::Model)::Vector{Tuple{Float64,String}}\n\nLikewise to getLBs, extract the upper bounds.\n\n\n\n\n\n","category":"method"}]
}
